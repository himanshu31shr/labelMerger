var Y=Object.defineProperty;var G=(S,e,t)=>e in S?Y(S,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):S[e]=t;var $=(S,e,t)=>G(S,typeof e!="symbol"?e+"":e,t);import{f as u,K as A,p as H,l as F,T as I,n as z,o as O,t as C,u as k,q as v,v as U,m as M}from"./firebase-vendor-yCdHbQaA.js";import{a9 as w,aa as f,ab as _,ac as N,ad as Z,ae as D,af as T,ag as q}from"./index-Cb91SdTK.js";class j{async uploadFile(e,t,r){try{const n=u().currentUser;if(!n)throw console.error("Authentication error: No user is currently signed in"),new Error("User must be authenticated to upload files");const c=w(f,t),o={...r,customMetadata:{userId:n.uid,uploadedAt:Date.now().toString(),...r==null?void 0:r.customMetadata}},i=await _(c,e,o);return await N(i.ref)}catch(s){throw console.error("Error uploading file:",s),s}}async getFileUrl(e){try{const t=w(f,e);return await N(t)}catch(t){throw console.error("Error getting file URL:",t),t}}async deleteFile(e){try{const t=w(f,e);await Z(t)}catch(t){throw console.error("Error deleting file:",t),t}}async listFiles(e){try{const t=w(f,e);return(await D(t)).items.map(s=>s.fullPath)}catch(t){throw console.error("Error listing files:",t),t}}async getFileMetadata(e){try{const t=w(f,e);return await T(t)}catch(t){throw console.error("Error getting file metadata:",t),t}}async updateFileMetadata(e,t){try{const r=w(f,e);return await q(r,{customMetadata:t})}catch(r){throw console.error("Error updating file metadata:",r),r}}generateFilePath(e,t){const s=u().currentUser;if(!s)throw console.error("Authentication error: No user is currently signed in"),new Error("User must be authenticated to generate file paths");const n=s.uid,c=Date.now(),o=t.replace(/[^a-zA-Z0-9.-]/g,"_");return`${e}/${n}/${c}_${o}`}isAuthenticated(){return!!u().currentUser}}const x=new j,K={expiryDays:30,restrictAccess:!0,isShared:!1,visibility:"private"};class W{constructor(){$(this,"STORAGE_PATH","pdfs");$(this,"COLLECTION_NAME","pdfs")}generateDateBasedPath(e){const t=new Date,r=String(t.getDate()).padStart(2,"0"),s=String(t.getMonth()+1).padStart(2,"0"),n=t.getFullYear(),c=`${r}-${s}-${n}`;return`${this.STORAGE_PATH}/${e}/${c}`}getTodaysFolderPath(){const t=u().currentUser;return t?this.generateDateBasedPath(t.uid):null}getTodaysDateString(){const e=new Date,t=String(e.getDate()).padStart(2,"0"),r=String(e.getMonth()+1).padStart(2,"0"),s=e.getFullYear();return`${t}-${r}-${s}`}async listTodaysFiles(){try{const e=this.getTodaysFolderPath();if(!e)throw new Error("User must be authenticated to access files");return await this.listFolderContents(e)}catch(e){if(e instanceof Error&&e.message.includes("folder does not exist"))return[];throw e}}async uploadPdf(e,t,r,s=K){try{const c=u().currentUser;if(!c)return console.error("Authentication error: No user is currently signed in"),{success:!1,error:"User must be authenticated to upload files",fileId:"",downloadUrl:"",expiresAt:0,isShared:!1,restrictAccess:!0,metadata:{userId:"",uploadedAt:0,expiresAt:0,originalFileName:t,fileSize:0,restrictAccess:!0,isShared:!1,visibility:"private",description:""}};console.log("Starting PDF upload with auth user:",c.uid);const o=Date.now(),i=c.uid,a=this.generateDateBasedPath(i),l=t.replace(/[^a-zA-Z0-9.-]/g,"_"),h=new Date().toISOString().replace(/[:.]/g,"-").substring(11,19),p=`${a}/${h}_${l}`;console.log("Generated file path:",p);const E=Math.max(1,Math.min(90,s.expiryDays)),d=new Date;d.setDate(d.getDate()+E);const g=d.getTime(),y={userId:i,fileId:"",expiresAt:g.toString(),visibility:s.visibility||"private",description:r.description||s.description||""};console.log("Uploading file with metadata:",y);const m=w(f,p),P=await _(m,e,{contentType:"application/pdf",customMetadata:y});console.log("File uploaded successfully, getting download URL");const b=await N(P.ref),L={userId:i,uploadedAt:o,expiresAt:g,originalFileName:t,fileSize:e.size,restrictAccess:s.restrictAccess,isShared:s.isShared,visibility:s.visibility||"private",storagePath:p,stats:{categoryCount:r.categoryCount,productCount:r.productCount,sortConfig:r.sortConfig},description:r.description||s.description};console.log("Storing metadata in Firestore");const B=A(),R=await H(F(B,this.COLLECTION_NAME),{...L,storagePath:p,downloadUrl:b,uploadedAt:I.fromMillis(o),expiresAt:I.fromMillis(g)});return console.log("Metadata stored, updating storage metadata with file ID"),await q(m,{customMetadata:{fileId:R.id}}),console.log("Upload process completed successfully"),{fileId:R.id,downloadUrl:b,expiresAt:g,isShared:s.isShared,restrictAccess:s.restrictAccess,metadata:L,success:!0}}catch(n){return console.error("Error uploading PDF:",n),{success:!1,error:n instanceof Error?n.message:"Unknown error during upload",fileId:"",downloadUrl:"",expiresAt:0,isShared:!1,restrictAccess:!0,metadata:{userId:"",uploadedAt:0,expiresAt:0,originalFileName:t,fileSize:0,restrictAccess:!0,isShared:!1,visibility:"private",description:""}}}}async getPdfDetails(e){try{const r=u().currentUser;if(!r)throw new Error("User must be authenticated to view file details");const s=A(),n=z(s,this.COLLECTION_NAME,e),c=await O(n);if(!c.exists())return null;const o=c.data();if(o.userId!==r.uid&&o.visibility==="private")throw new Error("You do not have access to this file");const i={userId:o.userId,uploadedAt:o.uploadedAt.toMillis(),expiresAt:o.expiresAt.toMillis(),originalFileName:o.originalFileName,fileSize:o.fileSize,restrictAccess:o.restrictAccess,isShared:o.isShared,visibility:o.visibility,storagePath:o.storagePath,stats:o.stats,description:o.description};return{fileId:e,downloadUrl:o.downloadUrl,expiresAt:i.expiresAt,isShared:i.isShared,restrictAccess:i.restrictAccess,metadata:i,success:!0}}catch(t){throw console.error("Error retrieving PDF details:",t),t}}async deletePdf(e){try{const r=u().currentUser;if(!r)throw new Error("User must be authenticated to delete files");const s=A(),n=z(s,this.COLLECTION_NAME,e),c=await O(n);if(!c.exists())throw new Error("File not found");const o=c.data();if(o.userId!==r.uid)throw new Error("You do not have permission to delete this file");await x.deleteFile(o.storagePath),await C(n)}catch(t){throw console.error("Error deleting PDF:",t),t}}async updatePdfExpiry(e,t){try{const s=u().currentUser;if(!s)throw new Error("User must be authenticated to update files");const n=Math.max(1,Math.min(90,t)),c=new Date;c.setDate(c.getDate()+n);const o=c.getTime(),i=A(),a=z(i,this.COLLECTION_NAME,e),l=await O(a);if(!l.exists())throw new Error("File not found");const h=l.data();if(h.userId!==s.uid)throw new Error("You do not have permission to update this file");await k(a,{expiresAt:I.fromMillis(o)}),await x.updateFileMetadata(h.storagePath,{expiresAt:o.toString()})}catch(r){throw console.error("Error updating PDF expiry:",r),r}}async listUserPdfs(){try{const t=u().currentUser;if(!t)throw new Error("User must be authenticated to list files");const r=A(),s=v(F(r,this.COLLECTION_NAME),U("userId","==",t.uid)),n=await M(s);if(n.empty)return[];const c=Date.now(),o=[];return n.forEach(i=>{const a=i.data(),l=a.expiresAt.toMillis();l<c||o.push({fileId:i.id,downloadUrl:a.downloadUrl,expiresAt:l,isShared:a.isShared,restrictAccess:a.restrictAccess,metadata:{userId:a.userId,uploadedAt:a.uploadedAt.toMillis(),expiresAt:l,originalFileName:a.originalFileName,fileSize:a.fileSize,restrictAccess:a.restrictAccess,isShared:a.isShared,visibility:a.visibility,storagePath:a.storagePath,stats:a.stats,description:a.description},success:!0})}),o.sort((i,a)=>a.metadata.uploadedAt-i.metadata.uploadedAt)}catch(e){throw console.error("Error listing PDFs:",e),e}}async cleanupExpiredFiles(){try{const t=u().currentUser;if(!t)throw new Error("User must be authenticated to clean up files");const r=Date.now(),s=A(),n=v(F(s,this.COLLECTION_NAME),U("userId","==",t.uid),U("expiresAt","<=",I.fromMillis(r))),c=await M(n);if(c.empty)return 0;let o=0;for(const i of c.docs){const a=i.data();try{await x.deleteFile(a.storagePath),await C(i.ref),o++}catch(l){console.error(`Failed to delete expired file ${i.id}:`,l)}}return o}catch(e){throw console.error("Error cleaning up expired files:",e),e}}async listUserFolders(){try{const t=u().currentUser;if(!t)throw new Error("User must be authenticated to list folders");const r=t.uid,s=`${this.STORAGE_PATH}/${r}`,n=w(f,s),o=(await D(n)).prefixes.map(async a=>{const l=a.fullPath,h=a.name,p=await D(a);let E=0,d=new Date(0);const g=p.items.map(async y=>{try{const m=await T(y),P=m.size||0,b=new Date(m.updated);E+=P,b>d&&(d=b)}catch(m){console.warn(`Failed to get metadata for ${y.fullPath}:`,m)}});return await Promise.all(g),{path:l,name:h,fileCount:p.items.length,totalSize:E,lastModified:d.getTime()===0?new Date:d}});return(await Promise.all(o)).sort((a,l)=>a.name.localeCompare(l.name))}catch(e){throw console.error("Error listing user folders:",e),e}}async listFolderContents(e){try{const r=u().currentUser;if(!r)throw new Error("User must be authenticated to list folder contents");await this.validateUserAccess(e);const s=w(f,e),c=(await D(s)).items.map(async i=>{var a,l;try{const[h,p]=await Promise.all([T(i),N(i)]),E=A();let d=null,g=null;try{const y=v(F(E,this.COLLECTION_NAME),U("storagePath","==",i.fullPath),U("userId","==",r.uid)),m=await M(y);if(!m.empty){const P=m.docs[0];g=P.id,d=P.data()}}catch(y){console.warn(`Failed to get Firestore data for ${i.fullPath}:`,y)}return{path:i.fullPath,name:i.name,size:h.size||0,lastModified:new Date(h.updated),downloadUrl:p,fileId:g,metadata:d?{userId:d.userId,uploadedAt:((a=d.uploadedAt)==null?void 0:a.toMillis())||0,expiresAt:((l=d.expiresAt)==null?void 0:l.toMillis())||0,originalFileName:d.originalFileName,fileSize:d.fileSize,restrictAccess:d.restrictAccess,isShared:d.isShared,visibility:d.visibility,storagePath:d.storagePath,stats:d.stats,description:d.description}:void 0}}catch(h){return console.error(`Failed to process file ${i.fullPath}:`,h),null}});return(await Promise.all(c)).filter(Boolean).sort((i,a)=>i.name.localeCompare(a.name))}catch(t){throw console.error("Error listing folder contents:",t),t}}async getFolderSize(e){try{if(!u().currentUser)throw new Error("User must be authenticated to get folder size");await this.validateUserAccess(e);const s=w(f,e),n=await D(s);let c=0;const o=n.items.map(async a=>{try{return(await T(a)).size||0}catch(l){return console.warn(`Failed to get size for ${a.fullPath}:`,l),0}});return c=(await Promise.all(o)).reduce((a,l)=>a+l,0),c}catch(t){throw console.error("Error getting folder size:",t),t}}async deleteFolderRecursive(e){try{const r=u().currentUser;if(!r)throw new Error("User must be authenticated to delete folders");await this.validateUserAccess(e);const s=w(f,e),n=await D(s),c=n.items.map(async i=>{try{const a=A(),l=v(F(a,this.COLLECTION_NAME),U("storagePath","==",i.fullPath),U("userId","==",r.uid)),p=(await M(l)).docs.map(E=>C(E.ref));await Promise.all(p),await x.deleteFile(i.fullPath)}catch(a){throw console.error(`Failed to delete file ${i.fullPath}:`,a),a}}),o=n.prefixes.map(async i=>{await this.deleteFolderRecursive(i.fullPath)});await Promise.all([...c,...o]),console.log(`Successfully deleted folder: ${e}`)}catch(t){throw console.error("Error deleting folder recursively:",t),t}}async deleteFile(e){try{const r=u().currentUser;if(!r)throw new Error("User must be authenticated to delete files");await this.validateUserAccess(e);const s=A(),n=v(F(s,this.COLLECTION_NAME),U("storagePath","==",e),U("userId","==",r.uid)),o=(await M(n)).docs.map(i=>C(i.ref));await Promise.all(o),await x.deleteFile(e),console.log(`Successfully deleted file: ${e}`)}catch(t){throw console.error("Error deleting file:",t),t}}async deleteMultipleFiles(e){try{if(!u().currentUser)throw new Error("User must be authenticated to delete files");const s=e.map(c=>this.validateUserAccess(c));await Promise.all(s);const n=e.map(c=>this.deleteFile(c));await Promise.all(n),console.log(`Successfully deleted ${e.length} files`)}catch(t){throw console.error("Error deleting multiple files:",t),t}}async validateUserAccess(e){try{const r=u().currentUser;if(!r)throw new Error("User must be authenticated to access files");const s=r.uid,n=`${this.STORAGE_PATH}/${s}`;if(!e.startsWith(n))throw new Error("You do not have permission to access this path");return!0}catch(t){throw console.error("Error validating user access:",t),t}}}const X=new W;export{K as d,X as p};
